import fs2.*
import cats.effect.{Trace => _, *}
import fs2.io.file.Path
import fs2.io.file.Files

/* We can also use exec to evaluate an effect but not propagate a unit value. */
object Example14 extends IOApp.Simple {

  def countWords(book: Stream[IO, String]): Stream[IO, Long] =
    book.map(_ => 1L).fold1(_ + _)

  def countWordsInBooks(
      books: Stream[IO, Stream[IO, String]]
  ): Stream[IO, Long] =
    books.map(book => countWords(book)).parJoinUnbounded.fold1(_ + _)

    // Use the files API to read UTF8 strings and split them into words
  def readBook(path: Path): Stream[IO, String] = Files[IO]
    .readUtf8(path)
    .flatMap(str => Stream.emits(str.split(" ")))
    .map(_.trim)
    .filter(_.nonEmpty)

  // Use the files API to list the contents of the data directory
  val books = Files[IO].list(Path("data")).debug()


  def run: IO[Unit] = {
    // Expect a result of 734271
    countWordsInBooks(books.map(readBook)).compile.last.flatMap(result =>
      IO.println(s"The result was $result")
    )
  }
}
